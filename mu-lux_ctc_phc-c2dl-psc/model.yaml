format_version: 0.3.2
name: Pancreatic Cell Phase Contrast Segmentation (DeepWater - CTC submission)
description: The method combines deep learning with watershed segmentation. For each frame, the convolutional
  neural network of U-Net shape detects all cells by markers and recognizes the foreground and the
  background of the frame. Then, the final segmentation is generated by a Marker-Controlled Watershed
  transformation.
timestamp: 2021-02-17T10:13:32.618903
cite:
  - text: Ulman V. et al., Nature Methods 2017
    doi: https://doi.org/10.1038/nmeth.447
  - text: Filip Lux and Petr Matula, arXiv 2020
    doi: https://arxiv.org/abs/2004.01607
authors:
  - name: "Filip Lux"
    affiliation: "Centre for Biomedical Image Analysis, Masaryk University"
  - name: "Petr Matula"
    affiliation: "Centre for Biomedical Image Analysis, Masaryk University"
git_repo: https://gitlab.fi.muni.cz/xlux/deepwater
documentation: http://public.celltrackingchallenge.net/participants/MU-Lux-CZ.pdf
covers: [./cover.jpg]
attachments:
    files: ["./preprocessing.txt", "./postprocessing.txt", "./exampleImage.tiff", "./resultImage.tiff"]
tags:
  - deepwater
  - deepimagej
  - segmentation
  - watershed
  - cell-tracking-challenge
  - phase-contrast
license: MIT
language: java
framework: tensorflow
# source: http://public.celltrackingchallenge.net/participants/MU-Lux-CZ.zip
test_inputs:
  - ./exampleImage.npy
test_outputs:
  - ./cells-watershed.npy
sample_inputs:
  - ./exampleImage.tiff
sample_outputs:
  - ./resultImage.tiff
weights:
  tensorflow_saved_model_bundle:
    source: https://zenodo.org/record/4155785/files/MU-Lux_CTC_PhC-C2DL-PSC_tf_saved_model_bundle.zip
    sha256: 2f436133d4373a4080b8412985861b90be03166c5d07f477304d53b30d8cc28b
    tensorflow_version: 1.15
    attachments:
      files: ["./config.xml"]
  keras_hdf5:
    source: https://zenodo.org/record/4155785/files/MU-Lux_CTC_unet_PhC-C2DL-PSC.h5
    sha256: 0cc15900861ed5e5e7a6254400a85ed6f9b5d488bf1204d1274d36386b239283
inputs:
  - name: input
    axes: byxc
    data_type: float32
    data_range: [-inf, inf]
    shape:
      min: [1, 32, 32, 1]
      step: [0, 32, 32, 0]
outputs:
  - name: output
    axes: byxc
    data_type: float32
    data_range: [-inf, inf]
    halo: [0, 97, 97, 0]
    shape:
        reference_input: input
        scale: [1, 1, 1, 1]
        offset: [0, 0, 0, 0]
run_mode:
  - name: deepimagej
config:
# custom config for DeepImageJ, see https://github.com/bioimage-io/configuration/issues/23
  deepimagej:
    pyramidal_model: false
    allow_tiling: true
    model_keys:
      tensorflow_model_tag: tf.saved_model.tag_constants.SERVING
      tensorflow_siganture_def: tf.saved_model.signature_constants.DEFAULT_SERVING_SIGNATURE_DEF_KEY
    test_information:
      inputs:
        - name: exampleImage.tiff
          size: 720 x 576 x 1 x 1
          pixel_size:
            x: 0.16 µm
            y: 0.16 µm
            z: 1.0 pixel
      outputs:
        - name: resultImage.tiff
          type: image
          size: 720 x 576 x 1 x 1
      memory_peak: 306.7 Mb
      runtime: 4.3 s
    prediction:
      preprocess:
      -   spec: ij.IJ::runMacroFile
          kwargs: preprocessing.txt
      postprocess:
      -   spec: ij.IJ::runMacroFile
          kwargs: postprocessing.txt
